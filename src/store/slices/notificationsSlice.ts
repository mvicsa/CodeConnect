import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { Notification, NotificationType } from '@/types/notification';

interface NotificationsState {
  notifications: Notification[];
  unreadCount: number;
  loading: boolean;
  error: string | null;
}

const initialState: NotificationsState = {
  notifications: [],
  unreadCount: 0,
  loading: false,
  error: null,
};

const notificationsSlice = createSlice({
  name: 'notifications',
  initialState,
  reducers: {
    setNotifications(state, action: PayloadAction<Notification[]>) {
      state.notifications = action.payload;
      state.unreadCount = action.payload.filter(n => !n.isRead).length;
      console.log('üìã Redux: Set notifications count:', state.notifications.length, 'unread:', state.unreadCount);
    },
    addNotification(state, action: PayloadAction<Notification>) {
      const newId = action.payload._id;
      console.log('‚ûï Redux: Adding notification:', { 
        id: newId, 
        type: action.payload.type, 
        content: action.payload.content,
        isRead: action.payload.isRead
      });
      
      if (!state.notifications.some(n => n._id === newId)) {
        state.notifications = [action.payload, ...state.notifications];
        if (!action.payload.isRead) state.unreadCount++;
        console.log('‚úÖ Redux: Notification added. Total:', state.notifications.length, 'unread:', state.unreadCount);
      } else {
        console.log('‚ö†Ô∏è Redux: Notification already exists, skipping');
      }
    },
    updateNotification(state, action: PayloadAction<Notification>) {
      const idx = state.notifications.findIndex(n => n._id === action.payload._id);
      if (idx !== -1) {
        state.notifications[idx] = action.payload;
        state.unreadCount = state.notifications.filter(n => !n.isRead).length;
      }
    },
    deleteNotification(state, action: PayloadAction<string>) {
      state.notifications = state.notifications.filter(n => n._id !== action.payload);
      state.unreadCount = state.notifications.filter(n => !n.isRead).length;
      // Force state update to trigger re-render
      state.notifications = [...state.notifications];
    },
    deleteByPostAndUser(state, action: PayloadAction<{ 
      postId?: string, 
      commentId?: string, 
      replyId?: string, 
      type: string, 
      fromUserId: string, 
      isReply?: boolean,
      reactionType?: string 
    }>) {
      console.log('üî• deleteByPostAndUser called with:', action.payload);
      const beforeCount = state.notifications.length;
      
      state.notifications = state.notifications.filter(n => {
        const notifFromUserId = String(n.fromUserId?._id || n.fromUserId);
        const notifPostId = String(n.data?.postId || (n as any).postId || '');
        const notifCommentId = String(n.data?.commentId || n.data?._id || (n as any).commentId || n._id || '');
        const notifReplyId = String(n.data?.replyId || (n as any).replyId || '');
        const notifParentCommentId = String(
          n.data?.parentCommentId || 
          (n as any).parentCommentId || 
          n.data?.comment?.parentCommentId ||
          ''
        );
        
        // ÿßÿ≥ÿ™ÿÆÿ±ÿßÿ¨ ŸÜŸàÿπ ÿßŸÑÿ™ŸÅÿßÿπŸÑ ŸÖŸÜ ÿßŸÑÿ•ÿ¥ÿπÿßÿ±
        const notifReactionType = n.data?.reactionType || n.data?.reaction;
        
        // ÿ≠ÿ∞ŸÅ ÿ•ÿ¥ÿπÿßÿ± ÿ™ŸÅÿßÿπŸÑ ÿ£Ÿà ÿ•ÿ¥ÿπÿßÿ± ŸÉŸàŸÖŸÜÿ™/ÿ±ŸäŸæŸÑÿßŸä ÿ®ŸÜÿßÿ°Ÿã ÿπŸÑŸâ id/type/fromUserId
        const matchReaction =
        notifFromUserId === String(action.payload.fromUserId) &&
        n.type.endsWith('REACTION') &&
        (
          notifPostId === String(action.payload.postId || '') ||
          notifCommentId === String(action.payload.commentId || '') ||
          notifReplyId === String(action.payload.replyId || '')
        ) &&
        // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ŸÜŸàÿπ ÿßŸÑÿ™ŸÅÿßÿπŸÑ ÿ•ÿ∞ÿß ŸÉÿßŸÜ ŸÖÿ≠ÿØÿØŸãÿß
        (!action.payload.reactionType || notifReactionType === action.payload.reactionType);
          
        const matchComment =
          n.type === action.payload.type &&
          action.payload.commentId &&
          notifCommentId === String(action.payload.commentId);

        // When a comment is deleted, also remove all reply notifications to that comment
        const matchRepliesOfDeletedComment =
          (action.payload.type === 'COMMENT_ADDED' || action.payload.type === 'REPLY_CLEANUP' || action.payload.type === 'COMMENT_ADDED') &&
          action.payload.commentId &&
          n.type === NotificationType.COMMENT_ADDED &&
          (
            notifParentCommentId === String(action.payload.commentId) ||
            (n.data?.comment && String(n.data.comment.parentCommentId) === String(action.payload.commentId)) ||
            (n.data?.commentId && String(n.data.commentId) === String(action.payload.commentId))
          );

        // When a comment is deleted, also remove all notifications that reference this comment as their target
        const matchAllNotificationsForDeletedComment =
          action.payload.type === 'COMMENT_ADDED' &&
          action.payload.commentId &&
          (
            // Direct notifications on this comment
            notifCommentId === String(action.payload.commentId) ||
            // Replies to this comment (parentCommentId points to the deleted comment)
            (n.type === NotificationType.COMMENT_ADDED && notifParentCommentId === String(action.payload.commentId)) ||
            // Mentions in this comment or replies to this comment
            (n.type === NotificationType.USER_MENTIONED && 
             (notifCommentId === String(action.payload.commentId) || notifParentCommentId === String(action.payload.commentId))) ||
            // Reactions on this comment
            (n.type.endsWith('REACTION') && notifCommentId === String(action.payload.commentId))
          );
        
        // Enhanced cleanup for comments with replies - also check comment data structure
        const matchEnhancedCommentCleanup =
          action.payload.type === 'COMMENT_ADDED' &&
          action.payload.commentId &&
          (
            // Check if notification's comment data has the deleted comment as parent
            (n.data?.comment?.parentCommentId === String(action.payload.commentId)) ||
            // Check if notification is about a reply where parentCommentId matches
            (n.type === NotificationType.COMMENT_ADDED && 
             (n.data?.parentCommentId === String(action.payload.commentId) ||
              String(n.data?.comment?.parentCommentId) === String(action.payload.commentId))) ||
            // Check for mentions in replies to the deleted comment
            (n.type === NotificationType.USER_MENTIONED &&
             (n.data?.parentCommentId === String(action.payload.commentId) ||
              String(n.data?.comment?.parentCommentId) === String(action.payload.commentId)))
          );

        const matchMention =
        n.type === NotificationType.USER_MENTIONED &&
          (
            notifCommentId === String(action.payload.commentId) ||
            notifCommentId === String(action.payload.replyId) ||
            (n.data?.parentCommentId && n.data.parentCommentId === action.payload.commentId) ||
            // üî• ŸÅÿ≠ÿµ ÿ•ÿ∂ÿßŸÅŸä ÿ¥ÿßŸÖŸÑ ŸÑŸÑŸÖŸÜÿ¥ŸÜ
            (action.payload.commentId && n.data?.comment?._id === String(action.payload.commentId)) ||
            (action.payload.commentId && String(n.data?._id) === String(action.payload.commentId))
          );

        const matchFollow =
          n.type === NotificationType.FOLLOWED_USER &&
          (
            notifFromUserId === String(action.payload.fromUserId) ||
            notifFromUserId === String((action.payload as any).followId)
          );

        // üî• ÿ™ÿ≥ÿ¨ŸäŸÑ ÿ™ŸÅÿµŸäŸÑŸä ŸÑÿ™ÿµÿ≠Ÿäÿ≠ ŸÖÿ¥ÿßŸÉŸÑ ÿßŸÑŸÖŸÜÿ¥ŸÜ
        if (n.type === NotificationType.USER_MENTIONED) {
          console.log('üîç deleteByPostAndUser - Checking MENTION notification:', {
            notificationId: n._id,
            notificationType: n.type,
            matchMention, 
            payloadCommentId: action.payload.commentId, 
            notifCommentId,
            notifParentCommentId,
            notificationData: n.data,
            fullPayload: action.payload
          });
        }

        const shouldDelete = matchReaction || matchComment || matchRepliesOfDeletedComment || 
                          matchAllNotificationsForDeletedComment || matchEnhancedCommentCleanup || 
                          matchMention || matchFollow;
        
        if (shouldDelete && n.type === NotificationType.USER_MENTIONED) {
          console.log('üóëÔ∏è deleteByPostAndUser - DELETING MENTION notification:', {
            notificationId: n._id,
            reason: matchMention ? 'direct mention match' : 'other match',
            notification: n
          });
        }
        
        return !shouldDelete;
      });
      
      const afterCount = state.notifications.length;
      const deletedCount = beforeCount - afterCount;
      
      console.log(`üóëÔ∏è Deleted ${deletedCount} notifications (${beforeCount} -> ${afterCount})`);
      if (deletedCount > 0) {
        console.log('üîç Deleted notification types:', action.payload.type);
      }
      
      state.unreadCount = state.notifications.filter(n => !n.isRead).length;
      // Force state update to trigger re-render
      state.notifications = [...state.notifications];
    },
    markAsRead(state, action: PayloadAction<string>) {
      const idx = state.notifications.findIndex(n => n._id === action.payload);
      if (idx !== -1) {
        state.notifications[idx].isRead = true;
        state.unreadCount = state.notifications.filter(n => !n.isRead).length;
      }
    },
    markAllAsRead(state) {
      state.notifications.forEach(n => (n.isRead = true));
      state.unreadCount = 0;
    },
    setLoading(state, action: PayloadAction<boolean>) {
      state.loading = action.payload;
    },
    setError(state, action: PayloadAction<string | null>) {
      state.error = action.payload;
    },
    clearNotifications(state) {
      state.notifications = [];
      state.unreadCount = 0;
      state.loading = false;
      state.error = null;
    },
    
    // üî• ÿ•ÿ∂ÿßŸÅÿ© reducer ÿ¨ÿØŸäÿØ ŸÑÿ≠ÿ∞ŸÅ ÿ•ÿ¥ÿπÿßÿ±ÿßÿ™ ÿßŸÑÿ™ÿπŸÑŸäŸÇÿßÿ™ ŸàÿßŸÑÿ±ÿØŸàÿØ
    removeCommentNotifications: (state, action: PayloadAction<{
      commentId: string;
      includeReplies?: boolean;
      includeMentions?: boolean;
      includeReactions?: boolean;
      mentions?: string[];
      forceBroadcast?: boolean;
    }>) => {
      const { 
        commentId, 
        includeReplies = true, 
        includeMentions = true, 
        includeReactions = true,
        mentions = [],
        forceBroadcast = false
      } = action.payload;
      
      const initialCount = state.notifications.length;
      
      console.log('üî• removeCommentNotifications called with:', {
        commentId,
        includeReplies,
        includeMentions,
        includeReactions,
        mentions,
        forceBroadcast,
        totalNotifications: initialCount
      });
      
      state.notifications = state.notifications.filter(notification => {
        let shouldRemove = false;
        
        const notifCommentId = String(notification.data?.commentId || notification.data?._id || notification._id || '');
        const notifParentCommentId = String(
          notification.data?.parentCommentId || 
          notification.data?.comment?.parentCommentId ||
          ''
        );
        
        // ÿ≠ÿ∞ŸÅ ÿ•ÿ¥ÿπÿßÿ± ÿßŸÑÿ™ÿπŸÑŸäŸÇ ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿä
        if (notification.type === NotificationType.COMMENT_ADDED && 
            notifCommentId === commentId) {
          shouldRemove = true;
        }
        
        // ÿ≠ÿ∞ŸÅ ÿ•ÿ¥ÿπÿßÿ±ÿßÿ™ ÿßŸÑÿ±ÿØŸàÿØ ÿ•ÿ∞ÿß ŸÉÿßŸÜ ŸÖÿ∑ŸÑŸàÿ® (COMMENT_ADDED with parentCommentId)
        if (includeReplies && 
            notification.type === NotificationType.COMMENT_ADDED && 
            notifParentCommentId === commentId) {
          shouldRemove = true;
        }
        
        // üî• ÿ™ÿ≠ÿ≥ŸäŸÜ ÿ≠ÿ∞ŸÅ ÿ•ÿ¥ÿπÿßÿ±ÿßÿ™ ÿßŸÑŸÖŸÜÿ¥ŸÜ ÿ®ÿ∑ÿ±ŸäŸÇÿ© ÿ£ŸÉÿ´ÿ± ÿ¥ŸÖŸàŸÑŸäÿ©
        if (includeMentions && notification.type === NotificationType.USER_MENTIONED) {
          // ŸÅÿ≠ÿµ ÿ•ÿ∞ÿß ŸÉÿßŸÜ ÿßŸÑÿ•ÿ¥ÿπÿßÿ± ŸÖÿ±ÿ™ÿ®ÿ∑ ÿ®ÿßŸÑÿ™ÿπŸÑŸäŸÇ ÿßŸÑŸÖÿ≠ÿ∞ŸàŸÅ
          const directMatch = notifCommentId === commentId || notifParentCommentId === commentId;
          
          // ŸÅÿ≠ÿµ ÿ•ÿ∂ÿßŸÅŸä ŸÅŸä ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ•ÿ¥ÿπÿßÿ±
          let dataMatch = false;
          const dataStr = JSON.stringify(notification.data || {});
          if (dataStr.includes(commentId)) {
            dataMatch = true;
          }
          
          // ŸÅÿ≠ÿµ ÿ•ÿ∞ÿß ŸÉÿßŸÜ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿßŸÑŸÖÿ∞ŸÉŸàÿ± ŸÅŸä ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑŸÖŸÜÿ¥ŸÜÿßÿ™
          let mentionMatch = false;
          if (mentions.length > 0) {
            const notifToUsername = notification.toUserId?.username || '';
            if (mentions.includes(notifToUsername)) {
              mentionMatch = true;
              console.log('üîç Found mention match by username:', notifToUsername);
            }
          }
          
          if (directMatch || dataMatch || mentionMatch) {
            shouldRemove = true;
            console.log('üóëÔ∏è Removing mention notification:', {
              id: notification._id,
              reason: directMatch ? 'direct match' : (dataMatch ? 'data match' : 'mention match'),
              toUser: notification.toUserId?.username
            });
          }
        }
        
        // ÿ≠ÿ∞ŸÅ ÿ•ÿ¥ÿπÿßÿ±ÿßÿ™ Reactions ÿ•ÿ∞ÿß ŸÉÿßŸÜ ŸÖÿ∑ŸÑŸàÿ® (ANY reaction type)
        if (includeReactions && notification.type.endsWith('REACTION') && 
            notifCommentId === commentId) {
          shouldRemove = true;
        }
        
        return !shouldRemove;
      });
      
      const deletedCount = initialCount - state.notifications.length;
      console.log(`üóëÔ∏è removeCommentNotifications: Removed ${deletedCount} comment-related notifications for commentId: ${commentId}`);
      
      // ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿπÿØÿßÿØ
      state.unreadCount = state.notifications.filter(n => !n.isRead).length;
      
      // üî• Force state immutability to trigger re-renders
      state.notifications = [...state.notifications];
      
      console.log('‚úÖ Comment notifications update completed. New state:', {
        totalNotifications: state.notifications.length,
        unreadCount: state.unreadCount,
        stateUpdateTimestamp: new Date().toISOString()
      });
    },

    // ÿ™ÿ≠ÿØŸäÿ´ removeNotificationsByCriteria ŸÑŸÑÿ™ÿπÿßŸÖŸÑ ŸÖÿπ ÿßŸÑÿ±ÿØŸàÿØ ÿ®ÿ¥ŸÉŸÑ ÿ£ŸÅÿ∂ŸÑ
    removeNotificationsByCriteria: (state, action: PayloadAction<{
      type?: string;
      postId?: string;
      commentId?: string;
      fromUserId?: string;
      parentCommentId?: string;
      reactionType?: string; // ÿ•ÿ∂ÿßŸÅÿ© ŸÜŸàÿπ ÿßŸÑÿ™ŸÅÿßÿπŸÑ
      affectedTypes?: string[]; // üî• ÿ¨ÿØŸäÿØ ŸÑÿ≠ÿ∞ŸÅ ÿ£ŸÜŸàÿßÿπ ŸÖÿ™ÿπÿØÿØÿ©
    }>) => {
      const { type, postId, commentId, fromUserId, parentCommentId, reactionType, affectedTypes } = action.payload;
      
      const initialCount = state.notifications.length;
      
      console.log('üîç removeNotificationsByCriteria called with:', {
        type, postId, commentId, fromUserId, parentCommentId, reactionType, affectedTypes,
        totalNotifications: initialCount
      });
      
      // üî• ÿπÿ±ÿ∂ ÿπŸäŸÜÿ© ŸÖŸÜ ÿßŸÑÿ•ÿ¥ÿπÿßÿ±ÿßÿ™ ÿßŸÑÿ≠ÿßŸÑŸäÿ© ŸÑŸÑÿ™ÿµÿ≠Ÿäÿ≠
      console.log('üîç Sample notifications in store:', state.notifications.slice(0, 3).map(n => ({
        id: n._id,
        type: n.type,
        content: n.content.substring(0, 30) + '...',
        dataKeys: Object.keys(n.data || {}),
        data: n.data
      })));
      
      if (type === 'POST' && postId) {
        console.log(`üîç Looking for ALL notifications related to POST: ${postId} (including comments, replies, reactions, mentions)`);
        
        // ÿπÿ±ÿ∂ ŸÉŸÑ ÿßŸÑÿ•ÿ¥ÿπÿßÿ±ÿßÿ™ ÿßŸÑŸÖÿ±ÿ™ÿ®ÿ∑ÿ© ÿ®ÿßŸÑÿ®Ÿàÿ≥ÿ™
        const relatedNotifications = state.notifications.filter(n => {
          const dataStr = JSON.stringify(n);
          return dataStr.includes(`"postId":"${postId}"`) || 
                 dataStr.includes(`"post":"${postId}"`) ||
                 String(n.data?.postId || '') === postId;
        });
        
        console.log(`üîç Found ${relatedNotifications.length} potentially related notifications:`, 
          relatedNotifications.map(n => ({
            id: n._id,
            type: n.type,
            content: n.content.substring(0, 30) + '...'
          }))
        );
      }
      
      state.notifications = state.notifications.filter(notification => {
        let shouldRemove = false;
        
        const notifFromUserId = String(notification.fromUserId?._id || notification.fromUserId);
        
        // üî• ŸÖÿ≠ÿßŸàŸÑÿ© ÿßŸÑÿπÿ´Ÿàÿ± ÿπŸÑŸâ postId ŸÅŸä ÿπÿØÿ© ÿ£ŸÖÿßŸÉŸÜ ŸÖŸÖŸÉŸÜÿ©
        const notifPostId = String(
          notification.data?.postId || 
          notification.data?.post?._id ||
          (notification.data?.post && typeof notification.data.post === 'string' ? notification.data.post : '') ||
          ''
        );
        
        const notifCommentId = String(notification.data?.commentId || notification.data?._id || notification._id || '');
        const notifParentCommentId = String(
          notification.data?.parentCommentId || 
          notification.data?.comment?.parentCommentId ||
          ''
        );
        
        // ÿßÿ≥ÿ™ÿÆÿ±ÿßÿ¨ ŸÜŸàÿπ ÿßŸÑÿ™ŸÅÿßÿπŸÑ ŸÖŸÜ ÿßŸÑÿ•ÿ¥ÿπÿßÿ±
        const notifReactionType = notification.data?.reactionType || notification.data?.reaction;
        
        // ÿ™ÿ≠ÿ≥ŸäŸÜ ŸÖÿπÿßŸÑÿ¨ÿ© ÿ•ÿ¥ÿπÿßÿ±ÿßÿ™ ÿßŸÑÿ™ŸÅÿßÿπŸÑÿßÿ™
        if (type && type.endsWith('_REACTION')) {
          // ŸÑŸÑÿ™ŸÅÿßÿπŸÑÿßÿ™ ÿπŸÑŸâ ÿßŸÑŸÖŸÜÿ¥Ÿàÿ±ÿßÿ™
          if (type === 'POST_REACTION' && String(notification.type) === 'POST_REACTION') {
            if (postId && notifPostId === postId) {
              // ÿ•ÿ∞ÿß ŸÑŸÖ Ÿäÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿØ fromUserId ÿ£Ÿà reactionTypeÿå ÿßÿ≠ÿ∞ŸÅ ŸÉŸÑ ÿßŸÑÿ™ŸÅÿßÿπŸÑÿßÿ™ ÿπŸÑŸâ ÿßŸÑŸÖŸÜÿ¥Ÿàÿ±
              if (!fromUserId && !reactionType) {
                shouldRemove = true;
                console.log('üóëÔ∏è Removing ALL POST_REACTION notifications for post:', {
                  id: notification._id,
                  fromUser: notifFromUserId,
                  postId: notifPostId,
                  reactionType: notifReactionType
                });
              } else if (!fromUserId || notifFromUserId === fromUserId) {
                if (!reactionType || notifReactionType === reactionType) {
                  shouldRemove = true;
                  console.log('üóëÔ∏è Removing POST_REACTION notification:', {
                    id: notification._id,
                    fromUser: notifFromUserId,
                    postId: notifPostId,
                    reactionType: notifReactionType
                  });
                }
              }
            }
          }
          
          // ŸÑŸÑÿ™ŸÅÿßÿπŸÑÿßÿ™ ÿπŸÑŸâ ÿßŸÑÿ™ÿπŸÑŸäŸÇÿßÿ™
          if (type === 'COMMENT_REACTION' && String(notification.type) === 'COMMENT_REACTION') {
            const matchCommentId = commentId && notifCommentId === commentId;
            const matchPostId = postId && notifPostId === postId;
            
            if (matchCommentId || matchPostId) {
              // ÿ•ÿ∞ÿß ŸÑŸÖ Ÿäÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿØ fromUserId ÿ£Ÿà reactionTypeÿå ÿßÿ≠ÿ∞ŸÅ ŸÉŸÑ ÿßŸÑÿ™ŸÅÿßÿπŸÑÿßÿ™ ÿπŸÑŸâ ÿßŸÑÿ™ÿπŸÑŸäŸÇ
              if (!fromUserId && !reactionType) {
                shouldRemove = true;
                console.log('üóëÔ∏è Removing ALL COMMENT_REACTION notifications for comment/post:', {
                  id: notification._id,
                  fromUser: notifFromUserId,
                  commentId: notifCommentId,
                  postId: notifPostId,
                  reactionType: notifReactionType
                });
              } else if (!fromUserId || notifFromUserId === fromUserId) {
                if (!reactionType || notifReactionType === reactionType) {
                  shouldRemove = true;
                  console.log('üóëÔ∏è Removing COMMENT_REACTION notification:', {
                    id: notification._id,
                    fromUser: notifFromUserId,
                    commentId: notifCommentId,
                    postId: notifPostId,
                    reactionType: notifReactionType
                  });
                }
              }
            }
          }
        }
        
        // üî• ÿ™ÿ≥ÿ¨ŸäŸÑ ÿ™ŸÅÿµŸäŸÑŸä ŸÑŸÑÿ™ÿµÿ≠Ÿäÿ≠
        if (type === 'POST' && postId) {
          const matches = notifPostId === postId;
          console.log('üîç Checking notification for POST deletion:', {
            notificationId: notification._id,
            notificationType: notification.type,
            notifPostId,
            targetPostId: postId,
            matches,
            notificationData: notification.data,
            hasAffectedTypes: !!affectedTypes,
            affectedTypes: affectedTypes
          });
          
          if (matches) {
            console.log('‚úÖ POST notification WILL BE DELETED:', {
              id: notification._id,
              type: notification.type,
              content: notification.content?.substring(0, 50) + '...'
            });
          }
        }
        
        // üî• ÿ≠ÿ∞ŸÅ ŸÉŸÑ ÿßŸÑÿ•ÿ¥ÿπÿßÿ±ÿßÿ™ ÿßŸÑŸÖÿ±ÿ™ÿ®ÿ∑ÿ© ÿ®ÿßŸÑŸÉŸàŸÖŸÜÿ™ (ŸàÿßŸÑÿ±ÿØŸàÿØ ÿπŸÑŸäŸá)
        if (type === 'COMMENT_ADDED') {
          // ÿ•ÿ∞ÿß ÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿØ commentIdÿå ÿßÿ≠ÿ∞ŸÅ ÿ™ÿπŸÑŸäŸÇ ŸÖÿ≠ÿØÿØ Ÿàÿ¨ŸÖŸäÿπ ÿßŸÑÿ±ÿØŸàÿØ ÿπŸÑŸäŸá
          if (commentId) {
            console.log('üîç Checking notification for COMMENT deletion (including replies):', {
              notificationId: notification._id,
              notificationType: notification.type,
              targetCommentId: commentId
            });
            // üî• ÿßŸÑÿ®ÿ≠ÿ´ ŸÅŸä ŸÉŸÑ ŸÖŸÉÿßŸÜ ŸÖŸÖŸÉŸÜ ŸäŸÉŸàŸÜ ŸÅŸäŸá commentId
            const foundInData = String(notification.data?.commentId || '') === commentId;
            const foundInId = String(notification.data?._id || '') === commentId;
            const foundInComment = String(notification.data?.comment?._id || '') === commentId;
            const foundInParent = String(notification.data?.parentCommentId || '') === commentId;
            
            // üî• ÿ®ÿ≠ÿ´ ÿ•ÿ∂ÿßŸÅŸä: ÿ•ÿ∞ÿß ŸÉÿßŸÜ Ÿáÿ∞ÿß ÿ±ÿØ ÿπŸÑŸâ ÿßŸÑÿ™ÿπŸÑŸäŸÇ ÿßŸÑŸÖÿ≠ÿ∞ŸàŸÅ
            const isReplyToDeletedComment = String(notification.data?.comment?.parentCommentId || '') === commentId;
            
            // üî• ŸÑŸÑŸÖŸÜÿ¥ŸÜ: ÿ®ÿ≠ÿ´ ÿ•ÿ∂ÿßŸÅŸä ÿ¥ÿßŸÖŸÑ ŸÅŸä ŸÉŸÑ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™
            let foundInMention = false;
            if (notification.type === 'USER_MENTIONED') {
              const dataStr = JSON.stringify(notification.data || {});
              foundInMention = dataStr.includes(commentId);
              
              // ÿ™ÿ≥ÿ¨ŸäŸÑ ŸÑŸÑÿ™ÿµÿ≠Ÿäÿ≠
              console.log('üîç Checking MENTION for comment deletion:', {
                notificationId: notification._id,
                commentId: commentId,
                foundInMention,
                notificationData: notification.data
              });
            }
            
            // üî• ÿ®ÿ≠ÿ´ ÿ¥ÿßŸÖŸÑ ŸÅŸä ŸÉŸÑ ÿ£ÿ¨ÿ≤ÿßÿ° ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ JSON
            let foundInFullData = false;
            try {
              const fullDataStr = JSON.stringify(notification);
              foundInFullData = fullDataStr.includes(`"commentId":"${commentId}"`) || 
                               fullDataStr.includes(`"parentCommentId":"${commentId}"`) ||
                               fullDataStr.includes(`"_id":"${commentId}"`);
            } catch (e) {
              // ÿ™ÿ¨ÿßŸáŸÑ ÿßŸÑÿ£ÿÆÿ∑ÿßÿ° ŸÅŸä ÿßŸÑÿ™ÿ≠ŸàŸäŸÑ
            }
            
            const isRelatedToComment = foundInData || foundInId || foundInComment || foundInParent || foundInMention || isReplyToDeletedComment || foundInFullData;
            
            if (isRelatedToComment) {
              shouldRemove = true;
              console.log('üóëÔ∏è DELETING notification for COMMENT/REPLY:', {
                id: notification._id,
                type: notification.type,
                commentId: commentId,
                foundWhere: {
                  data: foundInData,
                  id: foundInId,
                  comment: foundInComment,
                  parent: foundInParent,
                  mention: foundInMention,
                  replyToDeleted: isReplyToDeletedComment,
                  fullData: foundInFullData
                }
              });
            }
          }
          // ÿ•ÿ∞ÿß ÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿØ postId ŸÅŸÇÿ∑ (ÿ®ÿØŸàŸÜ commentId)ÿå ÿßÿ≠ÿ∞ŸÅ ŸÉŸÑ ÿßŸÑÿ™ÿπŸÑŸäŸÇÿßÿ™ ŸàÿßŸÑÿ±ÿØŸàÿØ ŸÅŸä ÿßŸÑŸÖŸÜÿ¥Ÿàÿ±
          else if (postId && notification.type === 'COMMENT_ADDED') {
            // ÿßŸÑÿ®ÿ≠ÿ´ ÿßŸÑÿ¥ÿßŸÖŸÑ ÿπŸÜ postId ŸÅŸä ŸÉŸÑ ÿ£ÿ¨ÿ≤ÿßÿ° ÿßŸÑÿ•ÿ¥ÿπÿßÿ±
            const dataStr = JSON.stringify(notification);
            const hasPostId = dataStr.includes(`"postId":"${postId}"`) || 
                             dataStr.includes(`"post":"${postId}"`) ||
                             notifPostId === postId;
            
            if (hasPostId) {
              shouldRemove = true;
              console.log('üóëÔ∏è DELETING ALL COMMENT/REPLY notifications for POST:', {
                id: notification._id,
                type: notification.type,
                postId: postId,
                notifPostId: notifPostId
              });
            }
          }
        }
        
                // üî• ÿ≠ÿ∞ŸÅ ŸÉŸÑ ÿßŸÑÿ•ÿ¥ÿπÿßÿ±ÿßÿ™ ÿßŸÑŸÖÿ±ÿ™ÿ®ÿ∑ÿ© ÿ®ÿßŸÑÿ®Ÿàÿ≥ÿ™ (ÿßŸÑÿ®Ÿàÿ≥ÿ™ + ÿßŸÑÿ™ÿπŸÑŸäŸÇÿßÿ™ + ÿßŸÑÿ±ÿØŸàÿØ + ÿßŸÑÿ™ŸÅÿßÿπŸÑÿßÿ™ + ÿßŸÑŸÖŸÜÿ¥ŸÜÿßÿ™)
        if (type === 'POST' && postId) {
          // üî• ÿßŸÑÿ®ÿ≠ÿ´ ŸÅŸä ŸÉŸÑ ŸÖŸÉÿßŸÜ ŸÖŸÖŸÉŸÜ ŸäŸÉŸàŸÜ ŸÅŸäŸá postId
          const foundInData = String(notification.data?.postId || '') === postId;
          const foundInComment = String(notification.data?.comment?.postId || '') === postId;
          const foundInPost = String(notification.data?.post?._id || '') === postId;
          
          // ÿßŸÑÿ®ÿ≠ÿ´ ŸÅŸä ÿßŸÑŸÄ replies ÿßŸÑŸÖÿ™ÿØÿßÿÆŸÑÿ©
          let foundInNestedReply = false;
          if (notification.data?.comment?.parentCommentId) {
            // Ÿáÿ∞ÿß ÿ±ÿØÿå ÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ postId ŸÅŸä ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖÿ™ÿØÿßÿÆŸÑÿ©
            const replyData = JSON.stringify(notification.data);
            foundInNestedReply = replyData.includes(`"postId":"${postId}"`);
          }
          
          // üî• ŸÑŸÑŸÖŸÜÿ¥ŸÜ: ÿ®ÿ≠ÿ´ ÿ•ÿ∂ÿßŸÅŸä ÿ¥ÿßŸÖŸÑ ŸÅŸä ŸÉŸÑ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™
          let foundInMention = false;
          if (notification.type === NotificationType.USER_MENTIONED) {
            const dataStr = JSON.stringify(notification.data || {});
            foundInMention = dataStr.includes(postId);
          }
          
          // üî• ŸÑŸÑÿ™ŸÅÿßÿπŸÑÿßÿ™ ÿπŸÑŸâ ÿßŸÑÿ™ÿπŸÑŸäŸÇÿßÿ™ ŸàÿßŸÑÿ±ÿØŸàÿØ: ÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ postId ŸÅŸä ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™
          let foundInCommentReaction = false;
          if (String(notification.type) === 'COMMENT_REACTION') {
            const dataStr = JSON.stringify(notification.data || {});
            foundInCommentReaction = dataStr.includes(postId);
          }
          
          // üî• ÿ®ÿ≠ÿ´ ÿ¥ÿßŸÖŸÑ ŸÅŸä ŸÉŸÑ ÿ£ÿ¨ÿ≤ÿßÿ° ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ JSON
          let foundInFullData = false;
          try {
            const fullDataStr = JSON.stringify(notification);
            foundInFullData = fullDataStr.includes(`"postId":"${postId}"`) || fullDataStr.includes(`"post":"${postId}"`);
          } catch (e) {
            // ÿ™ÿ¨ÿßŸáŸÑ ÿßŸÑÿ£ÿÆÿ∑ÿßÿ° ŸÅŸä ÿßŸÑÿ™ÿ≠ŸàŸäŸÑ
          }
          
          const isRelatedToPost = foundInData || foundInComment || foundInPost || foundInMention || foundInCommentReaction || foundInNestedReply || foundInFullData;
          
          if (isRelatedToPost) {
            shouldRemove = true;
            console.log('üóëÔ∏è DELETING notification for POST (including comments/replies):', {
              id: notification._id,
              type: notification.type,
              postId: postId,
              foundWhere: {
                data: foundInData,
                comment: foundInComment,
                post: foundInPost,
                mention: foundInMention,
                commentReaction: foundInCommentReaction,
                nestedReply: foundInNestedReply,
                fullData: foundInFullData
              }
            });
          }
        }
        
        // ÿ≠ÿ∞ŸÅ ÿ•ÿ¥ÿπÿßÿ±ÿßÿ™ reactions ÿπŸÑŸâ ÿßŸÑÿ®Ÿàÿ≥ÿ™ÿßÿ™ (ŸÖÿ≠ÿ≥ŸÜ)
        if (type === 'POST_REACTION' && postId) {
          if (notification.type === NotificationType.POST_REACTION && 
              (notifPostId === postId || JSON.stringify(notification).includes(`"postId":"${postId}"`)) && 
              (!fromUserId || notifFromUserId === fromUserId)) {
            shouldRemove = true;
            console.log('üóëÔ∏è Removing POST_REACTION for post:', {
              id: notification._id,
              postId: postId,
              fromUser: notifFromUserId
            });
          }
        }
        
        // üî• ÿ≠ÿ∞ŸÅ ÿ•ÿ¥ÿπÿßÿ±ÿßÿ™ reactions ÿπŸÑŸâ ÿßŸÑÿ™ÿπŸÑŸäŸÇÿßÿ™ ŸàÿßŸÑÿ±ÿØŸàÿØ 
        if (type === 'COMMENT_REACTION') {
          // ÿ≠ÿ∞ŸÅ ÿ®ŸÜÿßÿ°Ÿã ÿπŸÑŸâ postId (ÿ¨ŸÖŸäÿπ ÿ™ŸÅÿßÿπŸÑÿßÿ™ ÿßŸÑÿ™ÿπŸÑŸäŸÇÿßÿ™ ŸÅŸä ÿßŸÑŸÖŸÜÿ¥Ÿàÿ±)
          if (postId) {
            const dataStr = JSON.stringify(notification.data || {});
            const hasPostId = dataStr.includes(`"postId":"${postId}"`) || dataStr.includes(`"post":"${postId}"`);
            
            if (String(notification.type) === 'COMMENT_REACTION' && hasPostId && 
                (!fromUserId || notifFromUserId === fromUserId)) {
              shouldRemove = true;
              console.log('üóëÔ∏è Removing COMMENT_REACTION for post:', {
                id: notification._id,
                postId: postId,
                fromUser: notifFromUserId,
                commentId: notifCommentId
              });
            }
          }
          
          // ÿ≠ÿ∞ŸÅ ÿ®ŸÜÿßÿ°Ÿã ÿπŸÑŸâ commentId (ÿ™ŸÅÿßÿπŸÑÿßÿ™ ÿ™ÿπŸÑŸäŸÇ/ÿ±ÿØ ŸÖÿ≠ÿØÿØ)
          if (commentId && String(notification.type) === 'COMMENT_REACTION') {
            const dataStr = JSON.stringify(notification.data || {});
            const hasCommentId = dataStr.includes(`"commentId":"${commentId}"`) || 
                                String(notification.data?.commentId || '') === commentId ||
                                String(notification.data?._id || '') === commentId;
            
            if (hasCommentId && (!fromUserId || notifFromUserId === fromUserId)) {
              shouldRemove = true;
              console.log('üóëÔ∏è Removing COMMENT_REACTION for comment:', {
                id: notification._id,
                commentId: commentId,
                fromUser: notifFromUserId
              });
            }
          }
        }
        
        // üî• ÿ≠ÿ∞ŸÅ ÿ•ÿ¥ÿπÿßÿ±ÿßÿ™ ÿßŸÑŸÖŸÜÿ¥ŸÜ (ÿ¥ÿßŸÖŸÑ: ÿ®Ÿàÿ≥ÿ™/ÿ™ÿπŸÑŸäŸÇ/ÿ±ÿØ) - ŸÖÿ≠ÿ≥ŸÜ
        if (type === 'USER_MENTIONED') {
          const notifMentionedUserId = String(notification.toUserId?._id || notification.toUserId || '');
          
          // ÿßŸÑÿ®ÿ≠ÿ´ ÿßŸÑÿ¥ÿßŸÖŸÑ ÿπŸÜ postId ŸÅŸä ŸÉŸÑ ÿ£ÿ¨ÿ≤ÿßÿ° ÿßŸÑÿ•ÿ¥ÿπÿßÿ±
          const dataStr = JSON.stringify(notification);
          const hasPostId = dataStr.includes(`"postId":"${postId}"`) || 
                           dataStr.includes(`"post":"${postId}"`) ||
                           notifPostId === postId;
          
          // ÿ≠ÿ∞ŸÅ ÿßŸÑŸÖŸÜÿ¥ŸÜ ŸÅŸä ÿßŸÑÿ®Ÿàÿ≥ÿ™ ÿ£Ÿà ÿßŸÑÿ™ÿπŸÑŸäŸÇÿßÿ™ ÿ£Ÿà ÿßŸÑÿ±ÿØŸàÿØ ÿßŸÑŸÖÿ±ÿ™ÿ®ÿ∑ÿ© ÿ®ÿßŸÑÿ®Ÿàÿ≥ÿ™
          if (postId && hasPostId && notification.type === 'USER_MENTIONED') {
            // ÿ•ÿ∞ÿß ŸÑŸÖ Ÿäÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿØ fromUserIdÿå ÿßÿ≠ÿ∞ŸÅ ŸÉŸÑ ÿßŸÑŸÖŸÜÿ¥ŸÜÿßÿ™ ŸÅŸä ÿßŸÑŸÖŸÜÿ¥Ÿàÿ±
            if (!fromUserId) {
              shouldRemove = true;
              console.log('üóëÔ∏è Removing ALL USER_MENTIONED notifications for post (including comments/replies):', {
                id: notification._id,
                fromUser: notifFromUserId,
                toUser: notifMentionedUserId,
                postId: postId
              });
            } else if (notifFromUserId === fromUserId) {
              shouldRemove = true;
              console.log('üóëÔ∏è Removing USER_MENTIONED notification (including comments/replies):', {
                id: notification._id,
                fromUser: notifFromUserId,
                toUser: notifMentionedUserId,
                postId: postId
              });
            }
          }
          
          // ÿ≠ÿ∞ŸÅ ÿßŸÑŸÖŸÜÿ¥ŸÜ ŸÅŸä ÿßŸÑÿ™ÿπŸÑŸäŸÇ ÿ£Ÿà ÿßŸÑÿ±ÿØ (ŸÖÿ≠ÿ≥ŸÜ)
          if (commentId && notification.type === 'USER_MENTIONED') {
            // ÿßŸÑÿ®ÿ≠ÿ´ ÿßŸÑÿ¥ÿßŸÖŸÑ ÿπŸÜ commentId ŸÅŸä ŸÉŸÑ ÿ£ÿ¨ÿ≤ÿßÿ° ÿßŸÑÿ•ÿ¥ÿπÿßÿ±
            const dataStr = JSON.stringify(notification);
            const hasCommentId = dataStr.includes(`"commentId":"${commentId}"`) || 
                                notifCommentId === commentId ||
                                String(notification.data?._id || '') === commentId ||
                                String(notification.data?.comment?._id || '') === commentId;
            
            if (hasCommentId) {
              // ÿ•ÿ∞ÿß ŸÑŸÖ Ÿäÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿØ fromUserIdÿå ÿßÿ≠ÿ∞ŸÅ ŸÉŸÑ ÿßŸÑŸÖŸÜÿ¥ŸÜÿßÿ™ ŸÅŸä ÿßŸÑÿ™ÿπŸÑŸäŸÇ
              if (!fromUserId) {
                shouldRemove = true;
                console.log('üóëÔ∏è Removing ALL USER_MENTIONED notifications for comment (including replies):', {
                  id: notification._id,
                  fromUser: notifFromUserId,
                  toUser: notifMentionedUserId,
                  commentId: commentId
                });
              } else if (notifFromUserId === fromUserId) {
                shouldRemove = true;
                console.log('üóëÔ∏è Removing USER_MENTIONED notification (including replies):', {
                  id: notification._id,
                  fromUser: notifFromUserId,
                  toUser: notifMentionedUserId,
                  commentId: commentId
                });
              }
            }
          }
          
          // ÿ≠ÿ∞ŸÅ ÿßŸÑŸÖŸÜÿ¥ŸÜ ŸÖŸÜ ŸÖÿ≥ÿ™ÿÆÿØŸÖ ŸÖÿπŸäŸÜ (ŸÅŸÇÿ∑ ÿ•ÿ∞ÿß ÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿØ fromUserId)
          if (fromUserId && notifFromUserId === fromUserId && notification.type === 'USER_MENTIONED') {
            shouldRemove = true;
            console.log('üóëÔ∏è Removing USER_MENTIONED notification from specific user:', {
              id: notification._id,
              fromUser: notifFromUserId,
              toUser: notifMentionedUserId
            });
          }
        }
        
        // ÿ≠ÿ∞ŸÅ ÿ•ÿ¥ÿπÿßÿ±ÿßÿ™ ÿßŸÑŸÖÿ™ÿßÿ®ÿπÿ©
        if (type === 'FOLLOWED_USER' && fromUserId) {
          if (notification.type === NotificationType.FOLLOWED_USER && 
              notifFromUserId === fromUserId) {
            shouldRemove = true;
          }
        }
        
        return !shouldRemove;
      });
      
      const deletedCount = initialCount - state.notifications.length;
      console.log(`üóëÔ∏è removeNotificationsByCriteria: Deleted ${deletedCount} notifications for criteria:`, action.payload);
      console.log(`üìä Notifications count: ${initialCount} ‚Üí ${state.notifications.length}`);
      
      // ÿ•ÿ∏Ÿáÿßÿ± ŸÖÿß ÿ™ŸÖ ÿ≠ÿ∞ŸÅŸá ÿ®ÿßŸÑÿ™ŸÅÿµŸäŸÑ ÿ•ÿ∞ÿß ŸÉÿßŸÜ ÿ≠ÿ∞ŸÅ ÿ®Ÿàÿ≥ÿ™
      if (type === 'POST' && postId && deletedCount > 0) {
        console.log(`üéØ Successfully deleted ${deletedCount} notifications for POST ${postId}, including:`);
        console.log('   - Post notifications');
        console.log('   - Comment notifications');
        console.log('   - Reply notifications');
        console.log('   - Reaction notifications (post + comments)');
        console.log('   - Mention notifications (post + comments + replies)');
      }
      
      // ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿπÿØÿßÿØ
      const newUnreadCount = state.notifications.filter(n => !n.isRead).length;
      state.unreadCount = newUnreadCount;
      console.log(`üìä Unread count updated: ${state.unreadCount}`);
      
      // üî• Force state immutability to trigger re-renders
      state.notifications = [...state.notifications];
      
      console.log('‚úÖ State update completed. New state:', {
        totalNotifications: state.notifications.length,
        unreadCount: state.unreadCount,
        deletedCount: deletedCount,
        stateUpdateTimestamp: new Date().toISOString()
      });
    },

    // üî• ÿ•ÿ∂ÿßŸÅÿ© ÿØÿßŸÑÿ© ŸÑÿ≠ÿ∞ŸÅ ÿ•ÿ¥ÿπÿßÿ±ÿßÿ™ ÿßŸÑÿ®Ÿàÿ≥ÿ™ ŸàŸÉŸÑ ÿßŸÑÿ™ÿπŸÑŸäŸÇÿßÿ™ ŸàÿßŸÑÿ±ÿØŸàÿØ ÿßŸÑŸÖÿ±ÿ™ÿ®ÿ∑ÿ© ÿ®Ÿá
    removePostNotifications: (state, action: PayloadAction<{
      postId: string;
      includeComments?: boolean;
      includeReplies?: boolean;
      includeMentions?: boolean;
      includeReactions?: boolean;
    }>) => {
      const { postId, includeComments = true, includeReplies = true, includeMentions = true, includeReactions = true } = action.payload;
      
      const initialCount = state.notifications.length;
      
      state.notifications = state.notifications.filter(notification => {
        let shouldRemove = false;
        
        const notifPostId = String(notification.data?.postId || notification.data?._id || '');
        const notifCommentId = String(notification.data?.commentId || '');
        const notifParentCommentId = String(notification.data?.parentCommentId || '');
        
        // ÿ≠ÿ∞ŸÅ ÿ•ÿ¥ÿπÿßÿ±ÿßÿ™ ÿßŸÑÿ®Ÿàÿ≥ÿ™ ŸÜŸÅÿ≥Ÿá (POST_CREATED, POST_REACTION)
        if ((notification.type === NotificationType.POST_CREATED || notification.type === NotificationType.POST_REACTION) && 
            notifPostId === postId) {
          shouldRemove = true;
        }
        
        // ÿ≠ÿ∞ŸÅ ÿ•ÿ¥ÿπÿßÿ±ÿßÿ™ ÿßŸÑÿ™ÿπŸÑŸäŸÇÿßÿ™ ÿπŸÑŸâ ÿßŸÑÿ®Ÿàÿ≥ÿ™ ÿ•ÿ∞ÿß ŸÉÿßŸÜ ŸÖÿ∑ŸÑŸàÿ®
        if (includeComments && notification.type === NotificationType.COMMENT_ADDED && 
            notifPostId === postId) {
          shouldRemove = true;
        }
        
        // ÿ≠ÿ∞ŸÅ ÿ•ÿ¥ÿπÿßÿ±ÿßÿ™ ÿßŸÑÿ±ÿØŸàÿØ ÿπŸÑŸâ ÿ™ÿπŸÑŸäŸÇÿßÿ™ ÿßŸÑÿ®Ÿàÿ≥ÿ™ ÿ•ÿ∞ÿß ŸÉÿßŸÜ ŸÖÿ∑ŸÑŸàÿ®
        if (includeReplies && 
            notification.type === NotificationType.COMMENT_ADDED && 
            notifPostId === postId) {
          shouldRemove = true;
        }
        
        // ÿ≠ÿ∞ŸÅ ÿ•ÿ¥ÿπÿßÿ±ÿßÿ™ ÿßŸÑŸÖŸÜÿ¥ŸÜ ŸÅŸä ÿßŸÑÿ®Ÿàÿ≥ÿ™ ÿ£Ÿà ÿ™ÿπŸÑŸäŸÇÿßÿ™Ÿá ÿ•ÿ∞ÿß ŸÉÿßŸÜ ŸÖÿ∑ŸÑŸàÿ®
        if (includeMentions && notification.type === NotificationType.USER_MENTIONED && 
            notifPostId === postId) {
          shouldRemove = true;
        }
        
        // ÿ≠ÿ∞ŸÅ ÿ•ÿ¥ÿπÿßÿ±ÿßÿ™ Reactions ÿπŸÑŸâ ÿßŸÑÿ®Ÿàÿ≥ÿ™ ÿ£Ÿà ÿ™ÿπŸÑŸäŸÇÿßÿ™Ÿá ÿ•ÿ∞ÿß ŸÉÿßŸÜ ŸÖÿ∑ŸÑŸàÿ®
        if (includeReactions && notification.type.endsWith('REACTION') && 
            notifPostId === postId) {
          shouldRemove = true;
        }
        
        return !shouldRemove;
      });
      
      const deletedCount = initialCount - state.notifications.length;
      console.log(`üóëÔ∏è removePostNotifications: Removed ${deletedCount} post-related notifications for postId: ${postId}`);
      
      // ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿπÿØÿßÿØ
      state.unreadCount = state.notifications.filter(n => !n.isRead).length;
    },

    // üî• ÿ•ÿ∂ÿßŸÅÿ© reducer ÿÆÿßÿµ ÿ®ÿ≠ÿ∞ŸÅ ÿßŸÑŸÖŸÜÿ¥ŸÜ
    removeMentionNotifications: (state, action: PayloadAction<{
      postId?: string;
      commentId?: string;
      fromUserId?: string;
      toUserId?: string;
    }>) => {
      const { postId, commentId, fromUserId, toUserId } = action.payload;
      
      const initialCount = state.notifications.length;
      
      state.notifications = state.notifications.filter(notification => {
        let shouldRemove = false;
        
        if (notification.type === NotificationType.USER_MENTIONED) {
          // üî• ÿßÿ≥ÿ™ÿÆÿ±ÿßÿ¨ ÿ¥ÿßŸÖŸÑ ŸÑŸÑÿ®ŸäÿßŸÜÿßÿ™ ŸÖŸÜ ÿπÿØÿ© ŸÖŸàÿßŸÇÿπ ŸÖŸÖŸÉŸÜÿ©
          const notifPostId = String(
            notification.data?.postId || 
            notification.data?.post?._id ||
            (notification.data?.post && typeof notification.data.post === 'string' ? notification.data.post : '') ||
            notification.data?.comment?.postId ||
            ''
          );
          
          // üî• ÿßÿ≥ÿ™ÿÆÿ±ÿßÿ¨ commentId ŸÖŸÜ ÿπÿØÿ© ŸÖŸàÿßŸÇÿπ ŸÖŸÖŸÉŸÜÿ©  
          const notifCommentId = String(
            notification.data?.commentId || 
            notification.data?._id || 
            notification.data?.comment?._id ||
            notification._id ||
            ''
          );
          
          const notifParentCommentId = String(
            notification.data?.parentCommentId || 
            notification.data?.comment?.parentCommentId ||
            ''
          );
          
          const notifFromUserId = String(notification.fromUserId?._id || notification.fromUserId || '');
          const notifToUserId = String(notification.toUserId?._id || notification.toUserId || '');
          
          // üî• ÿ™ÿ≥ÿ¨ŸäŸÑ ÿ™ŸÅÿµŸäŸÑŸä ŸÑÿ™ÿµÿ≠Ÿäÿ≠ ŸÖÿ¥ÿßŸÉŸÑ ÿßŸÑŸÖŸÜÿ¥ŸÜ
          console.log(`üîç Checking mention notification:`, {
            notificationId: notification._id,
            notifCommentId,
            notifParentCommentId,
            notifPostId,
            notifFromUserId,
            notifToUserId,
            targetCommentId: commentId,
            targetPostId: postId,
            targetFromUserId: fromUserId,
            targetToUserId: toUserId,
            notificationData: notification.data
          });
          
          // ÿ≠ÿ∞ŸÅ ŸÖŸÜÿ¥ŸÜ ŸÅŸä ÿ®Ÿàÿ≥ÿ™ ŸÖÿπŸäŸÜ
          if (postId && notifPostId === postId) {
            shouldRemove = true;
            console.log(`üóëÔ∏è Removing mention in post: ${postId}`);
          }
          
          // ÿ≠ÿ∞ŸÅ ŸÖŸÜÿ¥ŸÜ ŸÅŸä ÿ™ÿπŸÑŸäŸÇ/ÿ±ÿØ ŸÖÿπŸäŸÜ - ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ŸÖŸÜÿ∑ŸÇ ÿ£ŸÉÿ´ÿ± ÿ¥ŸÖŸàŸÑŸäÿ©
          if (commentId && 
              (notifCommentId === commentId || 
               notifParentCommentId === commentId ||
               // ŸÅÿ≠ÿµ ÿ•ÿ∂ÿßŸÅŸä ŸÅŸä ÿ≠ÿßŸÑÿ© ŸÉÿßŸÜ commentId ŸÖÿÆÿ≤ŸàŸÜ ŸÅŸä ŸÖŸÉÿßŸÜ ÿ¢ÿÆÿ±
               (notification.data?.comment && String(notification.data.comment._id) === commentId))) {
            shouldRemove = true;
            console.log(`üóëÔ∏è Removing mention in comment/reply: ${commentId}`);
          }
          
          // ÿ≠ÿ∞ŸÅ ŸÖŸÜÿ¥ŸÜ ŸÖŸÜ ŸÖÿ≥ÿ™ÿÆÿØŸÖ ŸÖÿπŸäŸÜ
          if (fromUserId && notifFromUserId === fromUserId) {
            shouldRemove = true;
            console.log(`üóëÔ∏è Removing mention from user: ${fromUserId}`);
          }
          
          // ÿ≠ÿ∞ŸÅ ŸÖŸÜÿ¥ŸÜ ŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ŸÖÿπŸäŸÜ
          if (toUserId && notifToUserId === toUserId) {
            shouldRemove = true;
            console.log(`üóëÔ∏è Removing mention to user: ${toUserId}`);
          }
        }
        
        if (shouldRemove && !notification.isRead) {
          state.unreadCount = Math.max(0, state.unreadCount - 1);
        }
        
        return !shouldRemove;
      });
      
      const deletedCount = initialCount - state.notifications.length;
      console.log(`üóëÔ∏è removeMentionNotifications: Removed ${deletedCount} mention notifications`);
      
      // üî• Force state immutability to trigger re-renders
      state.notifications = [...state.notifications];
      
      console.log('‚úÖ State update completed for mentions. New state:', {
        totalNotifications: state.notifications.length,
        unreadCount: state.unreadCount,
        stateUpdateTimestamp: new Date().toISOString()
      });
    },
    
    // üî• ÿØÿßŸÑÿ© ÿ™ÿµÿ≠Ÿäÿ≠ ŸÖÿ§ŸÇÿ™ÿ© ŸÑÿ±ÿ§Ÿäÿ© ÿ®ŸÜŸäÿ© ÿßŸÑÿ•ÿ¥ÿπÿßÿ±ÿßÿ™
    debugNotifications: (state, action: PayloadAction<{ postId?: string; limitTo?: number }>) => {
      const { postId, limitTo = 5 } = action.payload;
      
      console.log('üß™ DEBUG: Current notifications in store:', {
        total: state.notifications.length,
        unread: state.unreadCount,
        notifications: state.notifications.slice(0, limitTo).map(n => ({
          id: n._id,
          type: n.type,
          isRead: n.isRead,
          content: n.content.substring(0, 50) + '...',
          data: n.data,
          fromUserId: n.fromUserId?._id || n.fromUserId,
          toUserId: n.toUserId?._id || n.toUserId,
          createdAt: n.createdAt
        }))
      });
      
      if (postId) {
        const relatedNotifications = state.notifications.filter(n => {
          const notifPostId = String(
            n.data?.postId || 
            n.data?.post?._id ||
            (n.data?.post && typeof n.data.post === 'string' ? n.data.post : '') ||
            ''
          );
          return notifPostId === postId;
        });
        
        console.log(`üß™ DEBUG: Notifications related to post ${postId}:`, {
          count: relatedNotifications.length,
          notifications: relatedNotifications.map(n => ({
            id: n._id,
            type: n.type,
            content: n.content.substring(0, 50) + '...',
            data: n.data
          }))
        });
      }
    },
  },
});

export const {
  setNotifications,
  addNotification,
  updateNotification,
  deleteNotification,
  deleteByPostAndUser,
  markAsRead,
  markAllAsRead,
  setLoading,
  setError,
  clearNotifications,
  removeCommentNotifications,     // üî• ÿ•ÿ∂ÿßŸÅÿ© ÿ¨ÿØŸäÿØÿ©
  removeNotificationsByCriteria,  // üî• ÿ•ÿ∂ÿßŸÅÿ© ÿ¨ÿØŸäÿØÿ©
  removePostNotifications,        // üî• ÿ•ÿ∂ÿßŸÅÿ© ÿ¨ÿØŸäÿØÿ©
  removeMentionNotifications,     // üî• ÿ•ÿ∂ÿßŸÅÿ© ÿ¨ÿØŸäÿØÿ©
  debugNotifications,             // üî• ÿØÿßŸÑÿ© ÿ™ÿµÿ≠Ÿäÿ≠ ŸÖÿ§ŸÇÿ™ÿ©
} = notificationsSlice.actions;

export default notificationsSlice.reducer; 